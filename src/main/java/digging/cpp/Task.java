/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package digging.cpp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-12")
public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.io.Serializable, Cloneable, Comparable<Task> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Task");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ETH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ethName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("deadline", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ROUTE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("routeIp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROUTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routeId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskTupleSchemeFactory());
  }

  public int taskId; // required
  public String ethName; // required
  public int port; // required
  public long deadline; // required
  /**
   * 
   * @see InterceptType
   */
  public InterceptType type; // required
  public String routeIp; // required
  public String routeId; // required
  public List<Map<String,String>> rule; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    ETH_NAME((short)2, "ethName"),
    PORT((short)3, "port"),
    DEADLINE((short)4, "deadline"),
    /**
     * 
     * @see InterceptType
     */
    TYPE((short)5, "type"),
    ROUTE_IP((short)6, "routeIp"),
    ROUTE_ID((short)7, "routeId"),
    RULE((short)8, "rule");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // ETH_NAME
          return ETH_NAME;
        case 3: // PORT
          return PORT;
        case 4: // DEADLINE
          return DEADLINE;
        case 5: // TYPE
          return TYPE;
        case 6: // ROUTE_IP
          return ROUTE_IP;
        case 7: // ROUTE_ID
          return ROUTE_ID;
        case 8: // RULE
          return RULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private static final int __DEADLINE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ETH_NAME, new org.apache.thrift.meta_data.FieldMetaData("ethName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEADLINE, new org.apache.thrift.meta_data.FieldMetaData("deadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InterceptType.class)));
    tmpMap.put(_Fields.ROUTE_IP, new org.apache.thrift.meta_data.FieldMetaData("routeIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE_ID, new org.apache.thrift.meta_data.FieldMetaData("routeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
  }

  public Task() {
  }

  public Task(
    int taskId,
    String ethName,
    int port,
    long deadline,
    InterceptType type,
    String routeIp,
    String routeId,
    List<Map<String,String>> rule)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.ethName = ethName;
    this.port = port;
    setPortIsSet(true);
    this.deadline = deadline;
    setDeadlineIsSet(true);
    this.type = type;
    this.routeIp = routeIp;
    this.routeId = routeId;
    this.rule = rule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Task(Task other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetEthName()) {
      this.ethName = other.ethName;
    }
    this.port = other.port;
    this.deadline = other.deadline;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetRouteIp()) {
      this.routeIp = other.routeIp;
    }
    if (other.isSetRouteId()) {
      this.routeId = other.routeId;
    }
    if (other.isSetRule()) {
      List<Map<String,String>> __this__rule = new ArrayList<Map<String,String>>(other.rule.size());
      for (Map<String,String> other_element : other.rule) {
        Map<String,String> __this__rule_copy = new HashMap<String,String>(other_element);
        __this__rule.add(__this__rule_copy);
      }
      this.rule = __this__rule;
    }
  }

  public Task deepCopy() {
    return new Task(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.ethName = null;
    setPortIsSet(false);
    this.port = 0;
    setDeadlineIsSet(false);
    this.deadline = 0;
    this.type = null;
    this.routeIp = null;
    this.routeId = null;
    this.rule = null;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public Task setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public String getEthName() {
    return this.ethName;
  }

  public Task setEthName(String ethName) {
    this.ethName = ethName;
    return this;
  }

  public void unsetEthName() {
    this.ethName = null;
  }

  /** Returns true if field ethName is set (has been assigned a value) and false otherwise */
  public boolean isSetEthName() {
    return this.ethName != null;
  }

  public void setEthNameIsSet(boolean value) {
    if (!value) {
      this.ethName = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public Task setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public long getDeadline() {
    return this.deadline;
  }

  public Task setDeadline(long deadline) {
    this.deadline = deadline;
    setDeadlineIsSet(true);
    return this;
  }

  public void unsetDeadline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEADLINE_ISSET_ID);
  }

  /** Returns true if field deadline is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadline() {
    return EncodingUtils.testBit(__isset_bitfield, __DEADLINE_ISSET_ID);
  }

  public void setDeadlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEADLINE_ISSET_ID, value);
  }

  /**
   * 
   * @see InterceptType
   */
  public InterceptType getType() {
    return this.type;
  }

  /**
   * 
   * @see InterceptType
   */
  public Task setType(InterceptType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getRouteIp() {
    return this.routeIp;
  }

  public Task setRouteIp(String routeIp) {
    this.routeIp = routeIp;
    return this;
  }

  public void unsetRouteIp() {
    this.routeIp = null;
  }

  /** Returns true if field routeIp is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteIp() {
    return this.routeIp != null;
  }

  public void setRouteIpIsSet(boolean value) {
    if (!value) {
      this.routeIp = null;
    }
  }

  public String getRouteId() {
    return this.routeId;
  }

  public Task setRouteId(String routeId) {
    this.routeId = routeId;
    return this;
  }

  public void unsetRouteId() {
    this.routeId = null;
  }

  /** Returns true if field routeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteId() {
    return this.routeId != null;
  }

  public void setRouteIdIsSet(boolean value) {
    if (!value) {
      this.routeId = null;
    }
  }

  public int getRuleSize() {
    return (this.rule == null) ? 0 : this.rule.size();
  }

  public java.util.Iterator<Map<String,String>> getRuleIterator() {
    return (this.rule == null) ? null : this.rule.iterator();
  }

  public void addToRule(Map<String,String> elem) {
    if (this.rule == null) {
      this.rule = new ArrayList<Map<String,String>>();
    }
    this.rule.add(elem);
  }

  public List<Map<String,String>> getRule() {
    return this.rule;
  }

  public Task setRule(List<Map<String,String>> rule) {
    this.rule = rule;
    return this;
  }

  public void unsetRule() {
    this.rule = null;
  }

  /** Returns true if field rule is set (has been assigned a value) and false otherwise */
  public boolean isSetRule() {
    return this.rule != null;
  }

  public void setRuleIsSet(boolean value) {
    if (!value) {
      this.rule = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case ETH_NAME:
      if (value == null) {
        unsetEthName();
      } else {
        setEthName((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case DEADLINE:
      if (value == null) {
        unsetDeadline();
      } else {
        setDeadline((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((InterceptType)value);
      }
      break;

    case ROUTE_IP:
      if (value == null) {
        unsetRouteIp();
      } else {
        setRouteIp((String)value);
      }
      break;

    case ROUTE_ID:
      if (value == null) {
        unsetRouteId();
      } else {
        setRouteId((String)value);
      }
      break;

    case RULE:
      if (value == null) {
        unsetRule();
      } else {
        setRule((List<Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case ETH_NAME:
      return getEthName();

    case PORT:
      return getPort();

    case DEADLINE:
      return getDeadline();

    case TYPE:
      return getType();

    case ROUTE_IP:
      return getRouteIp();

    case ROUTE_ID:
      return getRouteId();

    case RULE:
      return getRule();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case ETH_NAME:
      return isSetEthName();
    case PORT:
      return isSetPort();
    case DEADLINE:
      return isSetDeadline();
    case TYPE:
      return isSetType();
    case ROUTE_IP:
      return isSetRouteIp();
    case ROUTE_ID:
      return isSetRouteId();
    case RULE:
      return isSetRule();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Task)
      return this.equals((Task)that);
    return false;
  }

  public boolean equals(Task that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_ethName = true && this.isSetEthName();
    boolean that_present_ethName = true && that.isSetEthName();
    if (this_present_ethName || that_present_ethName) {
      if (!(this_present_ethName && that_present_ethName))
        return false;
      if (!this.ethName.equals(that.ethName))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_deadline = true;
    boolean that_present_deadline = true;
    if (this_present_deadline || that_present_deadline) {
      if (!(this_present_deadline && that_present_deadline))
        return false;
      if (this.deadline != that.deadline)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_routeIp = true && this.isSetRouteIp();
    boolean that_present_routeIp = true && that.isSetRouteIp();
    if (this_present_routeIp || that_present_routeIp) {
      if (!(this_present_routeIp && that_present_routeIp))
        return false;
      if (!this.routeIp.equals(that.routeIp))
        return false;
    }

    boolean this_present_routeId = true && this.isSetRouteId();
    boolean that_present_routeId = true && that.isSetRouteId();
    if (this_present_routeId || that_present_routeId) {
      if (!(this_present_routeId && that_present_routeId))
        return false;
      if (!this.routeId.equals(that.routeId))
        return false;
    }

    boolean this_present_rule = true && this.isSetRule();
    boolean that_present_rule = true && that.isSetRule();
    if (this_present_rule || that_present_rule) {
      if (!(this_present_rule && that_present_rule))
        return false;
      if (!this.rule.equals(that.rule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_ethName = true && (isSetEthName());
    list.add(present_ethName);
    if (present_ethName)
      list.add(ethName);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_deadline = true;
    list.add(present_deadline);
    if (present_deadline)
      list.add(deadline);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_routeIp = true && (isSetRouteIp());
    list.add(present_routeIp);
    if (present_routeIp)
      list.add(routeIp);

    boolean present_routeId = true && (isSetRouteId());
    list.add(present_routeId);
    if (present_routeId)
      list.add(routeId);

    boolean present_rule = true && (isSetRule());
    list.add(present_rule);
    if (present_rule)
      list.add(rule);

    return list.hashCode();
  }

  @Override
  public int compareTo(Task other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEthName()).compareTo(other.isSetEthName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEthName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ethName, other.ethName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeadline()).compareTo(other.isSetDeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadline, other.deadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteIp()).compareTo(other.isSetRouteIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeIp, other.routeIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteId()).compareTo(other.isSetRouteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeId, other.routeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Task(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ethName:");
    if (this.ethName == null) {
      sb.append("null");
    } else {
      sb.append(this.ethName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deadline:");
    sb.append(this.deadline);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("routeIp:");
    if (this.routeIp == null) {
      sb.append("null");
    } else {
      sb.append(this.routeIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("routeId:");
    if (this.routeId == null) {
      sb.append("null");
    } else {
      sb.append(this.routeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rule:");
    if (this.rule == null) {
      sb.append("null");
    } else {
      sb.append(this.rule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStandardSchemeFactory implements SchemeFactory {
    public TaskStandardScheme getScheme() {
      return new TaskStandardScheme();
    }
  }

  private static class TaskStandardScheme extends StandardScheme<Task> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ETH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ethName = iprot.readString();
              struct.setEthNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deadline = iprot.readI64();
              struct.setDeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = digging.cpp.InterceptType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROUTE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeIp = iprot.readString();
              struct.setRouteIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROUTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeId = iprot.readString();
              struct.setRouteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.rule = new ArrayList<Map<String,String>>(_list0.size);
                Map<String,String> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                    _elem1 = new HashMap<String,String>(2*_map3.size);
                    String _key4;
                    String _val5;
                    for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                    {
                      _key4 = iprot.readString();
                      _val5 = iprot.readString();
                      _elem1.put(_key4, _val5);
                    }
                    iprot.readMapEnd();
                  }
                  struct.rule.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Task struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.ethName != null) {
        oprot.writeFieldBegin(ETH_NAME_FIELD_DESC);
        oprot.writeString(struct.ethName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEADLINE_FIELD_DESC);
      oprot.writeI64(struct.deadline);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.routeIp != null) {
        oprot.writeFieldBegin(ROUTE_IP_FIELD_DESC);
        oprot.writeString(struct.routeIp);
        oprot.writeFieldEnd();
      }
      if (struct.routeId != null) {
        oprot.writeFieldBegin(ROUTE_ID_FIELD_DESC);
        oprot.writeString(struct.routeId);
        oprot.writeFieldEnd();
      }
      if (struct.rule != null) {
        oprot.writeFieldBegin(RULE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.rule.size()));
          for (Map<String,String> _iter7 : struct.rule)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
              for (Map.Entry<String, String> _iter8 : _iter7.entrySet())
              {
                oprot.writeString(_iter8.getKey());
                oprot.writeString(_iter8.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskTupleSchemeFactory implements SchemeFactory {
    public TaskTupleScheme getScheme() {
      return new TaskTupleScheme();
    }
  }

  private static class TaskTupleScheme extends TupleScheme<Task> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetEthName()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetDeadline()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetRouteIp()) {
        optionals.set(5);
      }
      if (struct.isSetRouteId()) {
        optionals.set(6);
      }
      if (struct.isSetRule()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetEthName()) {
        oprot.writeString(struct.ethName);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetDeadline()) {
        oprot.writeI64(struct.deadline);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetRouteIp()) {
        oprot.writeString(struct.routeIp);
      }
      if (struct.isSetRouteId()) {
        oprot.writeString(struct.routeId);
      }
      if (struct.isSetRule()) {
        {
          oprot.writeI32(struct.rule.size());
          for (Map<String,String> _iter9 : struct.rule)
          {
            {
              oprot.writeI32(_iter9.size());
              for (Map.Entry<String, String> _iter10 : _iter9.entrySet())
              {
                oprot.writeString(_iter10.getKey());
                oprot.writeString(_iter10.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ethName = iprot.readString();
        struct.setEthNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deadline = iprot.readI64();
        struct.setDeadlineIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = digging.cpp.InterceptType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.routeIp = iprot.readString();
        struct.setRouteIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.routeId = iprot.readString();
        struct.setRouteIdIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.rule = new ArrayList<Map<String,String>>(_list11.size);
          Map<String,String> _elem12;
          for (int _i13 = 0; _i13 < _list11.size; ++_i13)
          {
            {
              org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem12 = new HashMap<String,String>(2*_map14.size);
              String _key15;
              String _val16;
              for (int _i17 = 0; _i17 < _map14.size; ++_i17)
              {
                _key15 = iprot.readString();
                _val16 = iprot.readString();
                _elem12.put(_key15, _val16);
              }
            }
            struct.rule.add(_elem12);
          }
        }
        struct.setRuleIsSet(true);
      }
    }
  }

}

