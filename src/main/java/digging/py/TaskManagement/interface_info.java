/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package digging.py.TaskManagement;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-11")
public class interface_info implements org.apache.thrift.TBase<interface_info, interface_info._Fields>, java.io.Serializable, Cloneable, Comparable<interface_info> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("interface_info");

  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IN_FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("in_flow", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OUT_FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("out_flow", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new interface_infoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new interface_infoTupleSchemeFactory());
  }

  public String ip; // required
  public String mac; // required
  public String in_flow; // required
  public String out_flow; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IP((short)1, "ip"),
    MAC((short)2, "mac"),
    IN_FLOW((short)3, "in_flow"),
    OUT_FLOW((short)4, "out_flow");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IP
          return IP;
        case 2: // MAC
          return MAC;
        case 3: // IN_FLOW
          return IN_FLOW;
        case 4: // OUT_FLOW
          return OUT_FLOW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_FLOW, new org.apache.thrift.meta_data.FieldMetaData("in_flow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_FLOW, new org.apache.thrift.meta_data.FieldMetaData("out_flow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(interface_info.class, metaDataMap);
  }

  public interface_info() {
  }

  public interface_info(
    String ip,
    String mac,
    String in_flow,
    String out_flow)
  {
    this();
    this.ip = ip;
    this.mac = mac;
    this.in_flow = in_flow;
    this.out_flow = out_flow;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public interface_info(interface_info other) {
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    if (other.isSetIn_flow()) {
      this.in_flow = other.in_flow;
    }
    if (other.isSetOut_flow()) {
      this.out_flow = other.out_flow;
    }
  }

  public interface_info deepCopy() {
    return new interface_info(this);
  }

  @Override
  public void clear() {
    this.ip = null;
    this.mac = null;
    this.in_flow = null;
    this.out_flow = null;
  }

  public String getIp() {
    return this.ip;
  }

  public interface_info setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public interface_info setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public String getIn_flow() {
    return this.in_flow;
  }

  public interface_info setIn_flow(String in_flow) {
    this.in_flow = in_flow;
    return this;
  }

  public void unsetIn_flow() {
    this.in_flow = null;
  }

  /** Returns true if field in_flow is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_flow() {
    return this.in_flow != null;
  }

  public void setIn_flowIsSet(boolean value) {
    if (!value) {
      this.in_flow = null;
    }
  }

  public String getOut_flow() {
    return this.out_flow;
  }

  public interface_info setOut_flow(String out_flow) {
    this.out_flow = out_flow;
    return this;
  }

  public void unsetOut_flow() {
    this.out_flow = null;
  }

  /** Returns true if field out_flow is set (has been assigned a value) and false otherwise */
  public boolean isSetOut_flow() {
    return this.out_flow != null;
  }

  public void setOut_flowIsSet(boolean value) {
    if (!value) {
      this.out_flow = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case IN_FLOW:
      if (value == null) {
        unsetIn_flow();
      } else {
        setIn_flow((String)value);
      }
      break;

    case OUT_FLOW:
      if (value == null) {
        unsetOut_flow();
      } else {
        setOut_flow((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IP:
      return getIp();

    case MAC:
      return getMac();

    case IN_FLOW:
      return getIn_flow();

    case OUT_FLOW:
      return getOut_flow();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IP:
      return isSetIp();
    case MAC:
      return isSetMac();
    case IN_FLOW:
      return isSetIn_flow();
    case OUT_FLOW:
      return isSetOut_flow();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof interface_info)
      return this.equals((interface_info)that);
    return false;
  }

  public boolean equals(interface_info that) {
    if (that == null)
      return false;

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_in_flow = true && this.isSetIn_flow();
    boolean that_present_in_flow = true && that.isSetIn_flow();
    if (this_present_in_flow || that_present_in_flow) {
      if (!(this_present_in_flow && that_present_in_flow))
        return false;
      if (!this.in_flow.equals(that.in_flow))
        return false;
    }

    boolean this_present_out_flow = true && this.isSetOut_flow();
    boolean that_present_out_flow = true && that.isSetOut_flow();
    if (this_present_out_flow || that_present_out_flow) {
      if (!(this_present_out_flow && that_present_out_flow))
        return false;
      if (!this.out_flow.equals(that.out_flow))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_mac = true && (isSetMac());
    list.add(present_mac);
    if (present_mac)
      list.add(mac);

    boolean present_in_flow = true && (isSetIn_flow());
    list.add(present_in_flow);
    if (present_in_flow)
      list.add(in_flow);

    boolean present_out_flow = true && (isSetOut_flow());
    list.add(present_out_flow);
    if (present_out_flow)
      list.add(out_flow);

    return list.hashCode();
  }

  @Override
  public int compareTo(interface_info other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIn_flow()).compareTo(other.isSetIn_flow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_flow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_flow, other.in_flow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOut_flow()).compareTo(other.isSetOut_flow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOut_flow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.out_flow, other.out_flow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("interface_info(");
    boolean first = true;

    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("in_flow:");
    if (this.in_flow == null) {
      sb.append("null");
    } else {
      sb.append(this.in_flow);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("out_flow:");
    if (this.out_flow == null) {
      sb.append("null");
    } else {
      sb.append(this.out_flow);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class interface_infoStandardSchemeFactory implements SchemeFactory {
    public interface_infoStandardScheme getScheme() {
      return new interface_infoStandardScheme();
    }
  }

  private static class interface_infoStandardScheme extends StandardScheme<interface_info> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, interface_info struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IN_FLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.in_flow = iprot.readString();
              struct.setIn_flowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUT_FLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.out_flow = iprot.readString();
              struct.setOut_flowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, interface_info struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      if (struct.in_flow != null) {
        oprot.writeFieldBegin(IN_FLOW_FIELD_DESC);
        oprot.writeString(struct.in_flow);
        oprot.writeFieldEnd();
      }
      if (struct.out_flow != null) {
        oprot.writeFieldBegin(OUT_FLOW_FIELD_DESC);
        oprot.writeString(struct.out_flow);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class interface_infoTupleSchemeFactory implements SchemeFactory {
    public interface_infoTupleScheme getScheme() {
      return new interface_infoTupleScheme();
    }
  }

  private static class interface_infoTupleScheme extends TupleScheme<interface_info> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, interface_info struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIp()) {
        optionals.set(0);
      }
      if (struct.isSetMac()) {
        optionals.set(1);
      }
      if (struct.isSetIn_flow()) {
        optionals.set(2);
      }
      if (struct.isSetOut_flow()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
      if (struct.isSetIn_flow()) {
        oprot.writeString(struct.in_flow);
      }
      if (struct.isSetOut_flow()) {
        oprot.writeString(struct.out_flow);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, interface_info struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
      if (incoming.get(2)) {
        struct.in_flow = iprot.readString();
        struct.setIn_flowIsSet(true);
      }
      if (incoming.get(3)) {
        struct.out_flow = iprot.readString();
        struct.setOut_flowIsSet(true);
      }
    }
  }

}

