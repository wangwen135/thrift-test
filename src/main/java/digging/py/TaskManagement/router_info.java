/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package digging.py.TaskManagement;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-11")
public class router_info implements org.apache.thrift.TBase<router_info, router_info._Fields>, java.io.Serializable, Cloneable, Comparable<router_info> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("router_info");

  private static final org.apache.thrift.protocol.TField PRODUCT_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("product_model", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IOS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("ios_info", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTERFACE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("interface_list", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new router_infoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new router_infoTupleSchemeFactory());
  }

  public String product_model; // required
  public String ios_info; // required
  public String hostname; // required
  public List<interface_info> interface_list; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_MODEL((short)1, "product_model"),
    IOS_INFO((short)2, "ios_info"),
    HOSTNAME((short)3, "hostname"),
    INTERFACE_LIST((short)4, "interface_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_MODEL
          return PRODUCT_MODEL;
        case 2: // IOS_INFO
          return IOS_INFO;
        case 3: // HOSTNAME
          return HOSTNAME;
        case 4: // INTERFACE_LIST
          return INTERFACE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_MODEL, new org.apache.thrift.meta_data.FieldMetaData("product_model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IOS_INFO, new org.apache.thrift.meta_data.FieldMetaData("ios_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERFACE_LIST, new org.apache.thrift.meta_data.FieldMetaData("interface_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, interface_info.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(router_info.class, metaDataMap);
  }

  public router_info() {
  }

  public router_info(
    String product_model,
    String ios_info,
    String hostname,
    List<interface_info> interface_list)
  {
    this();
    this.product_model = product_model;
    this.ios_info = ios_info;
    this.hostname = hostname;
    this.interface_list = interface_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public router_info(router_info other) {
    if (other.isSetProduct_model()) {
      this.product_model = other.product_model;
    }
    if (other.isSetIos_info()) {
      this.ios_info = other.ios_info;
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetInterface_list()) {
      List<interface_info> __this__interface_list = new ArrayList<interface_info>(other.interface_list.size());
      for (interface_info other_element : other.interface_list) {
        __this__interface_list.add(new interface_info(other_element));
      }
      this.interface_list = __this__interface_list;
    }
  }

  public router_info deepCopy() {
    return new router_info(this);
  }

  @Override
  public void clear() {
    this.product_model = null;
    this.ios_info = null;
    this.hostname = null;
    this.interface_list = null;
  }

  public String getProduct_model() {
    return this.product_model;
  }

  public router_info setProduct_model(String product_model) {
    this.product_model = product_model;
    return this;
  }

  public void unsetProduct_model() {
    this.product_model = null;
  }

  /** Returns true if field product_model is set (has been assigned a value) and false otherwise */
  public boolean isSetProduct_model() {
    return this.product_model != null;
  }

  public void setProduct_modelIsSet(boolean value) {
    if (!value) {
      this.product_model = null;
    }
  }

  public String getIos_info() {
    return this.ios_info;
  }

  public router_info setIos_info(String ios_info) {
    this.ios_info = ios_info;
    return this;
  }

  public void unsetIos_info() {
    this.ios_info = null;
  }

  /** Returns true if field ios_info is set (has been assigned a value) and false otherwise */
  public boolean isSetIos_info() {
    return this.ios_info != null;
  }

  public void setIos_infoIsSet(boolean value) {
    if (!value) {
      this.ios_info = null;
    }
  }

  public String getHostname() {
    return this.hostname;
  }

  public router_info setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getInterface_listSize() {
    return (this.interface_list == null) ? 0 : this.interface_list.size();
  }

  public java.util.Iterator<interface_info> getInterface_listIterator() {
    return (this.interface_list == null) ? null : this.interface_list.iterator();
  }

  public void addToInterface_list(interface_info elem) {
    if (this.interface_list == null) {
      this.interface_list = new ArrayList<interface_info>();
    }
    this.interface_list.add(elem);
  }

  public List<interface_info> getInterface_list() {
    return this.interface_list;
  }

  public router_info setInterface_list(List<interface_info> interface_list) {
    this.interface_list = interface_list;
    return this;
  }

  public void unsetInterface_list() {
    this.interface_list = null;
  }

  /** Returns true if field interface_list is set (has been assigned a value) and false otherwise */
  public boolean isSetInterface_list() {
    return this.interface_list != null;
  }

  public void setInterface_listIsSet(boolean value) {
    if (!value) {
      this.interface_list = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_MODEL:
      if (value == null) {
        unsetProduct_model();
      } else {
        setProduct_model((String)value);
      }
      break;

    case IOS_INFO:
      if (value == null) {
        unsetIos_info();
      } else {
        setIos_info((String)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case INTERFACE_LIST:
      if (value == null) {
        unsetInterface_list();
      } else {
        setInterface_list((List<interface_info>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_MODEL:
      return getProduct_model();

    case IOS_INFO:
      return getIos_info();

    case HOSTNAME:
      return getHostname();

    case INTERFACE_LIST:
      return getInterface_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_MODEL:
      return isSetProduct_model();
    case IOS_INFO:
      return isSetIos_info();
    case HOSTNAME:
      return isSetHostname();
    case INTERFACE_LIST:
      return isSetInterface_list();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof router_info)
      return this.equals((router_info)that);
    return false;
  }

  public boolean equals(router_info that) {
    if (that == null)
      return false;

    boolean this_present_product_model = true && this.isSetProduct_model();
    boolean that_present_product_model = true && that.isSetProduct_model();
    if (this_present_product_model || that_present_product_model) {
      if (!(this_present_product_model && that_present_product_model))
        return false;
      if (!this.product_model.equals(that.product_model))
        return false;
    }

    boolean this_present_ios_info = true && this.isSetIos_info();
    boolean that_present_ios_info = true && that.isSetIos_info();
    if (this_present_ios_info || that_present_ios_info) {
      if (!(this_present_ios_info && that_present_ios_info))
        return false;
      if (!this.ios_info.equals(that.ios_info))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_interface_list = true && this.isSetInterface_list();
    boolean that_present_interface_list = true && that.isSetInterface_list();
    if (this_present_interface_list || that_present_interface_list) {
      if (!(this_present_interface_list && that_present_interface_list))
        return false;
      if (!this.interface_list.equals(that.interface_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_product_model = true && (isSetProduct_model());
    list.add(present_product_model);
    if (present_product_model)
      list.add(product_model);

    boolean present_ios_info = true && (isSetIos_info());
    list.add(present_ios_info);
    if (present_ios_info)
      list.add(ios_info);

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_interface_list = true && (isSetInterface_list());
    list.add(present_interface_list);
    if (present_interface_list)
      list.add(interface_list);

    return list.hashCode();
  }

  @Override
  public int compareTo(router_info other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProduct_model()).compareTo(other.isSetProduct_model());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduct_model()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product_model, other.product_model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIos_info()).compareTo(other.isSetIos_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIos_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ios_info, other.ios_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterface_list()).compareTo(other.isSetInterface_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterface_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interface_list, other.interface_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("router_info(");
    boolean first = true;

    sb.append("product_model:");
    if (this.product_model == null) {
      sb.append("null");
    } else {
      sb.append(this.product_model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ios_info:");
    if (this.ios_info == null) {
      sb.append("null");
    } else {
      sb.append(this.ios_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interface_list:");
    if (this.interface_list == null) {
      sb.append("null");
    } else {
      sb.append(this.interface_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class router_infoStandardSchemeFactory implements SchemeFactory {
    public router_infoStandardScheme getScheme() {
      return new router_infoStandardScheme();
    }
  }

  private static class router_infoStandardScheme extends StandardScheme<router_info> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, router_info struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.product_model = iprot.readString();
              struct.setProduct_modelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IOS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ios_info = iprot.readString();
              struct.setIos_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERFACE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.interface_list = new ArrayList<interface_info>(_list0.size);
                interface_info _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new interface_info();
                  _elem1.read(iprot);
                  struct.interface_list.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setInterface_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, router_info struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.product_model != null) {
        oprot.writeFieldBegin(PRODUCT_MODEL_FIELD_DESC);
        oprot.writeString(struct.product_model);
        oprot.writeFieldEnd();
      }
      if (struct.ios_info != null) {
        oprot.writeFieldBegin(IOS_INFO_FIELD_DESC);
        oprot.writeString(struct.ios_info);
        oprot.writeFieldEnd();
      }
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.interface_list != null) {
        oprot.writeFieldBegin(INTERFACE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.interface_list.size()));
          for (interface_info _iter3 : struct.interface_list)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class router_infoTupleSchemeFactory implements SchemeFactory {
    public router_infoTupleScheme getScheme() {
      return new router_infoTupleScheme();
    }
  }

  private static class router_infoTupleScheme extends TupleScheme<router_info> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, router_info struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProduct_model()) {
        optionals.set(0);
      }
      if (struct.isSetIos_info()) {
        optionals.set(1);
      }
      if (struct.isSetHostname()) {
        optionals.set(2);
      }
      if (struct.isSetInterface_list()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProduct_model()) {
        oprot.writeString(struct.product_model);
      }
      if (struct.isSetIos_info()) {
        oprot.writeString(struct.ios_info);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetInterface_list()) {
        {
          oprot.writeI32(struct.interface_list.size());
          for (interface_info _iter4 : struct.interface_list)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, router_info struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.product_model = iprot.readString();
        struct.setProduct_modelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ios_info = iprot.readString();
        struct.setIos_infoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.interface_list = new ArrayList<interface_info>(_list5.size);
          interface_info _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new interface_info();
            _elem6.read(iprot);
            struct.interface_list.add(_elem6);
          }
        }
        struct.setInterface_listIsSet(true);
      }
    }
  }

}

